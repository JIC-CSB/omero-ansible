---
# Download and install OMERO.


###################################################################
# Install OMERO server dependencies.
###################################################################
  
- name: add the zeroc repo
  copy:
    src: zeroc-ice3.6.repo
    dest: /etc/yum.repos.d/

- name: install ICE packages
  yum:
    name: "{{ item }}"
    state: present
  with_items:
    - ice-all-runtime
    - ice-all-devel

- name: install other packages
  yum: name={{ item }}
       state=present
  with_items:
    - libdb-utils
    - openssl-devel
    - bzip2-devel
    - expat-devel
    - java-1.8.0-openjdk

- name: install virtualenv
  pip: name=virtualenv

###################################################################
# Set up ICE
###################################################################

- name: install ICE Python modules
  pip: 
    name: zeroc-ice
    version: 3.6

- name: open up the ICE port
  lineinfile:
    dest: /etc/ferm/ferm.conf
    line: 'proto tcp dport 4061 ACCEPT;'
    insertafter: '# Ansible specified rules.'
  notify: run ferm

###################################################################
# Disable SELINUX
###################################################################
#- name: install selinux utils
#  yum: name={{ item }}
#       state=present
#  with_items:
#    - policycoreutils-python
#    - libselinux-python
#    - libsemanage-python
#
#- name: enable httpd_read_user_content
#  seboolean: name=httpd_read_user_content
#             state=yes
#             persistent=yes
#
#- name: enable httpd_enable_homedirs
#  seboolean: name=httpd_enable_homedirs
#             state=yes
#             persistent=yes
#
#- name: open port 4080
#  seport: ports=4080
#          proto=tcp
#          setype=http_port_t
#          state=present

###################################################################
# Create and configure the omero user.
###################################################################

- name: create the omero user
  user:
    name: "{{ omero_user_name }}"
    uid: "{{ omero_uid }}"
    password: "{{ omero_user_password }}"

- name: set permissions of the omero users home directory
  file: path="{{ omero_home }}"
        mode=755
        state=directory

- name: add omero bashrc file
  template: src=bashrc
            dest="{{ omero_home }}/.bashrc"
            owner={{ omero_user_name }}

###################################################################
# Configure the OMERO data directory.
###################################################################

- name: create the actual omero data directory
  file: path={{ omero_data_dir }}
        owner="{{ omero_user_name }}"
        state=directory

- name: create link between actual omero data dir and OMERO dir
  file: src="{{ omero_data_dir }}"
        dest=/OMERO
        state=link

###################################################################
# Download, install and configure the OMERO server.
###################################################################

- name: download the omero tarball
  get_url: url=http://downloads.openmicroscopy.org/omero/{{ omero_version }}/artifacts/OMERO.server-{{ omero_version }}-{{ ice_version }}-{{ omero_branch }}.zip
           dest={{ omero_home }}/OMERO.server-{{ omero_version }}-{{ ice_version }}-{{ omero_branch }}.zip
           owner={{ omero_user_name }}
           group={{ omero_user_name }}

- name: unpack the omero tarball
  become: yes
  become_user: "{{ omero_user_name }}"
  command: unzip OMERO.server-{{ omero_version }}-{{ ice_version }}-{{ omero_branch}}.zip
  args:
    chdir: "{{ omero_home }}"
    creates: "{{ omero_home }}/OMERO.server-{{ omero_version }}-{{ ice_version }}-{{ omero_branch }}/LICENSE.txt"

- name: make a symbolic link to the omero server directory
  become: yes
  become_user: "{{ omero_user_name }}"
  file: src="{{ omero_home }}/OMERO.server-{{ omero_version }}-{{ ice_version }}-{{ omero_branch }}"
        dest="{{ omero_home }}/{{ omero_server_link }}"
        state=link

- name: configure the omero database
  become: yes
  become_user: "{{ omero_user_name }}"
  command: "{{ omero_cmd }} config set {{ item.key }} {{ item.value }}"
  with_items:
    - { key: 'omero.db.name', value: '{{ omero_db_name }}' }
    - { key: 'omero.db.user', value: '{{ omero_db_user }}' }
    - { key: 'omero.db.pass', value: '{{ omero_db_pass }}' }

- name: open up the omero specific ports
  lineinfile: dest=/etc/ferm/ferm.conf
              line='proto tcp dport (4063 4064) ACCEPT;'
              insertafter='# Ansible specified rules.'
  notify: run ferm

###################################################################
# Install Django.
###################################################################

- name: install django
  pip: requirements={{ omero_home }}/{{ omero_server_link }}/share/web/requirements-py27-nginx.txt


###################################################################
# Configure the postgres database.
###################################################################

- name: create the omero postgres user
  become: yes
  become_user: postgres
  postgresql_user: name="{{ omero_db_user }}"
                   password="{{ omero_db_pass }}"
                   role_attr_flags=NOSUPERUSER,NOCREATEDB,NOCREATEROLE

- name: create the omero postgres database
  become: yes
  become_user: postgres
  postgresql_db: name="{{ omero_db_name }}" 
                 owner="{{ omero_db_user }}"
  register: created_omero_database

- name: create omero sql script
  become: yes
  become_user: "{{ omero_user_name }}"
  command: "{{ omero_cmd }} db script --password {{ omero_root_password  }}"
  args:
    creates: "{{ omero_home }}/{{ omero_schema_sql }}"

- name: create omero schema
  become: yes
  become_user: "{{ omero_user_name }}"
  shell: "PGPASSWORD={{ omero_db_pass }} psql -w -h localhost -U {{ omero_db_user }} {{ omero_db_name }} < {{ omero_home }}/{{ omero_schema_sql }}"
  when: created_omero_database|changed

###################################################################
# Install OMERO.web
###################################################################

- name: unpack the omero tarball
  become: yes
  become_user: "{{ omero_user_name }}"
  unarchive: remote_src=yes
             src=http://downloads.openmicroscopy.org/omero/5.3.1/artifacts/OMERO.py-5.3.1-ice36-b61.zip
             dest={{ omero_home }}
             keep_newer=yes

- name: make a symbolic link to the omero web directory
  become: yes
  become_user: "{{ omero_user_name }}"
  file: src="{{ omero_home }}/OMERO.py-{{ omero_version }}-{{ ice_version }}-{{ omero_branch }}"
        dest="{{ omero_home }}/{{ omero_web_link }}"
        state=link

- name: install OMERO.web prerequisites
  become: yes
  become_user: "{{ omero_user_name }}"
  pip: requirements="{{ omero_home }}/{{ omero_web_link }}/share/web/requirements-py27.txt"


###################################################################
# Configure the OMERO web server.
###################################################################

- name: configure the omero web application server
  become: yes
  become_user: "{{ omero_user_name }}"
  command: "{{ omero_cmd }} config set omero.web.application_server wsgi-tcp"

- name: create symlinks for static media files
  become: yes
  become_user: "{{ omero_user_name }}"
  command: "{{ omero_cmd }} web syncmedia"

# Use shell instead of command to allow the piping of the output.
- name: create the nginx configuration file
  become: yes
  become_user: "{{ omero_user_name }}"
  become_method: su
  shell: "{{ omero_cmd }} web config nginx --http 80 --servername {{ omero_web_server }} > {{ omero_home }}/omero.conf"

- name: put nginx config file in nginx config area
  become: yes
  copy:
    src: "{{ omero_home }}/omero.conf"
    dest: /etc/nginx/conf.d/
    remote_src: yes
  notify: restart nginx

- name: create a service conf file
  copy: src=omero-web.service
        dest=/etc/systemd/system/

- name: start omero-web.service
  systemd: daemon_reload=yes
           enabled=yes
           name=omero-web
           state=started

###################################################################
# Configure /etc/hosts file with FQDN hostname.
###################################################################

- name: update /etc/hosts with FQDN hostname
  lineinfile: dest=/etc/hosts regexp="^({{ item }}\s*)(localhost.*)$" line="\1{{ ansible_fqdn }} \2"
              backrefs=yes
              owner=root
              group=root
              mode=0644
              backup=true
  with_items:
     - '127\.0\.0\.1'
     - '::1'
